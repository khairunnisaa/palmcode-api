{
    "openapi": "3.0.0",
    "info": {
        "title": "API DOCUMENTATION",
        "description": "Bookings and Countries API",
        "contact": {
            "email": "nissa.khairunnisaaa@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000/api",
            "description": "Demo API Server"
        }
    ],
    "paths": {
        "/bookings": {
            "get": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Get list of bookings",
                "description": "Returns a list of bookings",
                "operationId": "getBookingsList",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Create a new booking",
                "description": "Stores a new booking along with associated member, id verification, and country records",
                "operationId": "storeBooking",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "member_id": {
                                        "description": "ID of the member making the booking",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "country_id": {
                                        "description": "ID of the country for the booking",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "surfing_experience": {
                                        "description": "Surfing experience level (1-10+)",
                                        "type": "integer",
                                        "example": 8
                                    },
                                    "visit_date": {
                                        "description": "Date of the booking",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-10"
                                    },
                                    "desired_board": {
                                        "description": "Desired type of surfboard",
                                        "type": "string",
                                        "enum": [
                                            "longboard",
                                            "funboard",
                                            "shortboard",
                                            "fishboard",
                                            "gunboard"
                                        ],
                                        "example": "longboard"
                                    },
                                    "id_card_image": {
                                        "description": "Image file of the ID card for verification",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "link_url_path": {
                                        "description": "link image url of ID verification",
                                        "type": "string",
                                        "example": "http://example.com/1.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Booking"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Booking created successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "member_id": [
                                                    "The member id field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/bookings/{id}": {
            "put": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Update an existing booking",
                "description": "Updates an existing booking",
                "operationId": "updateBooking",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the booking",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "member_id": {
                                        "description": "ID of the member making the booking",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "country_id": {
                                        "description": "ID of the country for the booking",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "surfing_experience": {
                                        "description": "Surfing experience level (1-10+)",
                                        "type": "integer",
                                        "example": 8
                                    },
                                    "visit_date": {
                                        "description": "Date of the booking",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-10"
                                    },
                                    "desired_board": {
                                        "description": "Desired type of surfboard",
                                        "type": "string",
                                        "enum": [
                                            "longboard",
                                            "funboard",
                                            "shortboard",
                                            "fishboard",
                                            "gunboard"
                                        ],
                                        "example": "longboard"
                                    },
                                    "id_card_image": {
                                        "description": "Image file of the ID card for verification",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "link_url_path": {
                                        "description": "link image url of ID verification",
                                        "type": "string",
                                        "example": "http://example.com/1.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Booking updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Delete a booking",
                "description": "Deletes a booking",
                "operationId": "deleteBooking",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the booking",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Booking deleted successfully"
                    },
                    "404": {
                        "description": "Booking not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get list of countries",
                "description": "Returns a list of countries",
                "operationId": "getCountriesList",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Countries"
                ],
                "summary": "Create a new country",
                "description": "Stores a new country",
                "operationId": "storeCountry",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "flag_url",
                                    "code"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "United States of America"
                                    },
                                    "flag_url": {
                                        "type": "string",
                                        "example": "https://example.com/usa.jpg"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "USA"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Country created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Country"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/countries/{id}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get a specific country",
                "description": "Returns the details of a specific country",
                "operationId": "getCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the country",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Country"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Country not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Countries"
                ],
                "summary": "Update an existing country",
                "description": "Updates an existing country",
                "operationId": "updateCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the country",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "flag_url",
                                    "code"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "United States of America"
                                    },
                                    "flag_url": {
                                        "type": "string",
                                        "example": "https://example.com/usa.jpg"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "USA"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Country updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Country"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Country not found"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Countries"
                ],
                "summary": "Delete a country",
                "description": "Deletes a country",
                "operationId": "deleteCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the country",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Country deleted successfully"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/members": {
            "get": {
                "tags": [
                    "Members"
                ],
                "summary": "Get list of members",
                "description": "Returns a list of members",
                "operationId": "getMembersList",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Members"
                ],
                "summary": "Create a new member",
                "description": "Stores a new member",
                "operationId": "storeMember",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "whatsapp_number"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "whatsapp_number": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Member created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Member"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/members/{id}": {
            "get": {
                "tags": [
                    "Members"
                ],
                "summary": "Get a specific member",
                "description": "Returns the details of a specific member",
                "operationId": "getMember",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the member",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Member"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Members"
                ],
                "summary": "Update an existing member",
                "description": "Updates an existing member",
                "operationId": "updateMember",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the member",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "whatsapp_number"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "whatsapp_number": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Member updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Member"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Members"
                ],
                "summary": "Delete a member",
                "description": "Deletes a member",
                "operationId": "deleteMember",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the member",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member deleted successfully"
                    },
                    "404": {
                        "description": "Member not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Registers a new user with the provided name, email, and password.",
                "operationId": "registerUser",
                "requestBody": {
                    "description": "User data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "c_password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    },
                                    "c_password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "generated_token"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login an existing user",
                "description": "Logs in an existing user with the provided email and password.",
                "operationId": "loginUser",
                "requestBody": {
                    "description": "Login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "generated_token"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User logged in successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthorised"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid credentials."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Booking": {
                "title": "Booking",
                "description": "Booking model",
                "required": [
                    "member_id",
                    "country_id",
                    "surfing_experience",
                    "visit_date",
                    "desired_board"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier for the booking",
                        "type": "integer",
                        "example": "1"
                    },
                    "member_id": {
                        "description": "The ID of the member associated with the booking",
                        "type": "integer",
                        "example": "1"
                    },
                    "country_id": {
                        "description": "The ID of the country associated with the booking",
                        "type": "integer",
                        "example": "1"
                    },
                    "id_verification_id": {
                        "description": "The ID of the ID verification associated with the booking",
                        "type": "integer",
                        "example": "1"
                    },
                    "surfing_experience": {
                        "description": "The level of surfing experience of the member",
                        "type": "string",
                        "example": "Intermediate"
                    },
                    "visit_date": {
                        "description": "The date of the visit",
                        "type": "string",
                        "format": "date",
                        "example": "2024-05-15"
                    },
                    "desired_board": {
                        "description": "The desired type of surfboard for the visit",
                        "type": "string",
                        "example": "Shortboard"
                    },
                    "created_at": {
                        "description": "The date and time when the booking was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-05-15 10:00:00"
                    },
                    "updated_at": {
                        "description": "The date and time when the booking was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-05-15 10:30:00"
                    }
                },
                "type": "object"
            },
            "Country": {},
            "IdVerification": {},
            "Member": {}
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}